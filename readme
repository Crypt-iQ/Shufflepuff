An implementation of the CoinShuffle protocol in java. 

http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/coinshuffle.pdf

The general philosophy of this implementation is to write code that not only 
runs and implements the protocol, but as an exposition as clear as that of the 
original paper. As a result, this implementation assumes as given the same 
expectations that would be expected in the original exposition. 

Therefore, this implementation of CoinShuffle is NOT plug-and-play! Anyone who 
attempts to use this library must be sufficiently facile with cryptograhy and 
computer networks as to be capable of reading the paper linked above  and to 
provide this implementation with the correct cryptographic primitives and 
network interactions. 

The purpose of this design is that a set of test cases can be developed for
the protocol as a whole before any work has been put into its details. This 
means that there can already be a huge (TODO!!!!) set of test cases very early 
in the development of a working version of the protocol, which will greatly 
reduce the risk of introducing errors as the rest of the development work 
proceeds. Furthermore, this protocol can be adapted to any java implementation 
of Bitcoin, or any other cryptocurrency.

Instructions: After reading this file, go into the form package and read 
the function protocolDefinition() in ShuffleMachine.java, followed by
TestShuffleMachine.java. (Does not exist yet) This will teach you the protocol
and familiarize you with the services that must be provided in order for the
library to work.

Next, try running the tests. These tests will help you to detect bugs early when 
you write your implementation.

After you are certain you know what to do, you must implement the following 
interfaces:

CoinAmount
CoinSignature
CoinTransaction
VerificationKey
SigningKey
EncryptionKey
DecryptionKey
Packet
PacketFactory
Crypto
Coin
TODO I'm pretty sure that's all of them.

In particular, pay attention to the exceptions that are thrown in these 
interfaces to understand the kind of checks that will be required of the 
implementations.


